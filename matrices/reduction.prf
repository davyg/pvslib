(recursor
 (matRec 0
  (matRec-1 nil 3633797293
   ("" (skeep)
    (("" (skeep)
      (("" (name "n" "x`1")
        (("" (hide -2 -3)
          (("" (generalize x x)
            (("" (generalize n n)
              (("" (induct n)
                (("1" (reveal -2) (("1" (propax) nil nil)) nil)
                 ("2" (reveal -3) (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((predSup type-eq-decl nil recursor nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Square type-eq-decl nil matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (columns def-decl "{c: nat |
         (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
          (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (<= const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil))
   shostak)))
(myMatrices
 (SqMat_TCC1 0
  (SqMat_TCC1-1 nil 3633793055 ("" (subtype-tcc) nil nil) nil nil)))
(eigen)
(stability)
(orthogonality
 (sim_eigen_TCC1 0
  (sim_eigen_TCC1-1 nil 3633882804 ("" (subtype-tcc) nil nil) nil nil))
 (orth_mul_TCC1 0
  (orth_mul_TCC1-1 nil 3633882804 ("" (subtype-tcc) nil nil) nil nil)))
(symmetry)
(bloc
 (TL_TCC1 0
  (TL_TCC1-1 nil 3633692348 ("" (subtype-tcc) nil nil) nil nil))
 (TL_TCC2 0
  (TL_TCC2-1 nil 3633692348 ("" (subtype-tcc) nil nil) nil nil))
 (BCons_TCC1 0
  (BCons_TCC1-1 nil 3633793622 ("" (existence-tcc) nil nil) nil nil))
 (mul_diag_bloc_TCC1 0
  (mul_diag_bloc_TCC1-1 nil 3633882948 ("" (subtype-tcc) nil nil) nil
   nil))
 (mul_diag_bloc_TCC2 0
  (mul_diag_bloc_TCC2-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (mul_diag_bloc_TCC3 0
  (mul_diag_bloc_TCC3-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (mul_diag_bloc_TCC4 0
  (mul_diag_bloc_TCC4-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (mul_diag_bloc_TCC5 0
  (mul_diag_bloc_TCC5-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (mul_diag_bloc_TCC6 0
  (mul_diag_bloc_TCC6-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (transpose_bloc_TCC1 0
  (transpose_bloc_TCC1-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil
   nil))
 (diag_bloc_TCC1 0
  (diag_bloc_TCC1-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil nil))
 (orth_bloc_TCC1 0
  (orth_bloc_TCC1-1 nil 3633891817 ("" (subtype-tcc) nil nil) nil nil)))
(lemmas
 (lem4_TCC1 0
  (lem4_TCC1-1 nil 3633886442 ("" (subtype-tcc) nil nil) nil nil)))
(reduction
 (red 0
  (red-1 nil 3633798069
   (""
    (name "f"
          "LAMBDA (x: predSup(1)): EXISTS (O: (Orth[x`1]), D: (Diag[x`1])): car(x`2) = o * (D * transpose(o))")
    (("1" (lemma matRec)
      (("1" (instantiate -1 (1 f))
        (("1" (split)
          (("1" (rewrite -2 :dir RL)
            (("1" (skeep)
              (("1" (inst -1 ("(n, cons(S, null))"))
                (("1" (skeep)
                  (("1" (inst 1 O D)
                    (("1" (rewrite -1 :dir RL) nil nil)) nil))
                  nil)
                 ("2" (delete 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (delete 2)
            (("2" (rewrite -1 :dir RL)
              (("2" (skeep)
                (("2" (skeep)
                  (("2" (name "S" "car(x`2)")
                    (("1" (case "rows(S) = n!1 + 1")
                      (("1" (rewrite -2)
                        (("1"
                          (case "exists (x:real) : spectrum[n!1 + 1](S)(x)")
                          (("1" (lemma "lem4[n!1 + 1]")
                            (("1" (skeep)
                              (("1"
                                (instantiate -1 ("S" "x!1"))
                                (("1"
                                  (prop)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (instantiate
                                       -4
                                       "(n!1, cons(A, null))")
                                      (("1"
                                        (skolem!)
                                        (("1"
                                          (beta)
                                          (("1"
                                            (instantiate
                                             1
                                             ("(o*BCons[n!1 + 1](oh!1, zero[n!1 + 1 - 1], zero[n!1 + 1 - 1], 1))"
                                              "BCons[n!1 + 1](D!1, zero[n!1 + 1 - 1], zero[n!1 + 1 - 1], x!1)"))
                                            (("1"
                                              (rewrite transpose_mult)
                                              (("1"
                                                (rewrite
                                                 transpose_bloc)
                                                (("1"
                                                  (rewrite
                                                   matrix_mult_assoc
                                                   :dir
                                                   RL)
                                                  (("1"
                                                    (rewrite
                                                     matrix_mult_assoc
                                                     :dir
                                                     RL)
                                                    (("1"
                                                      (rewrite
                                                       matrix_mult_assoc
                                                       :dir
                                                       RL)
                                                      (("1"
                                                        (rewrite
                                                         mul_diag_bloc)
                                                        (("1"
                                                          (lemma
                                                           matrix_mult_assoc)
                                                          (("1"
                                                            (rewrite
                                                             matrix_mult_assoc
                                                             :dir
                                                             RL)
                                                            (("1"
                                                              (instantiate
                                                               -1
                                                               ("BCons[n!1 + 1](D!1 * transpose(oh!1), x!1 * zero[n!1 + 1 - 1], transpose(transpose(oh!1)) * zero[n!1 + 1 - 1], x!1)"
                                                                "o"
                                                                "BCons[n!1 + 1](oh!1, zero[n!1 + 1 - 1], zero[n!1 + 1 - 1], 1)"))
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (postpone)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (postpone)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil)
                                             ("3" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil)
                           ("3" (postpone) nil nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (postpone) nil nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak)))

