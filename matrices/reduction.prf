(reduction
 (matrix2vect_TCC1 0
  (matrix2vect_TCC1-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil
   nil))
 (matrix2vect_eq 0
  (matrix2vect_eq-1 nil 3627300892
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (rewrite full_matrix_eq)
        (("" (skolem-typepred)
          (("" (expand matrix2vect)
            ((""
              (typepred
               "array2list[real](rows(M!1))(LAMBDA (p: nat): entry(M!1)(p, 0))")
              ((""
                (typepred
                 "array2list[real](rows(N!1))(LAMBDA (p: nat): entry(N!1)(p, 0))")
                (("" (case "j!1 = 0")
                  (("1" (rewrite -1)
                    (("1" (rewrite -3)
                      (("1" (rewrite -6)
                        (("1" (rewrite -14)
                          (("1" (rewrite -15) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete 2) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((entry const-decl "real" matrices nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (listn type-eq-decl nil listn "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix2vect const-decl
     "{v: Vector | length(v) > 0 AND rows(PFM) = length(v)}" reduction
     nil)
    (full_matrix_eq formula-decl nil matrices nil)
    (rows const-decl "nat" matrices nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (<= const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (mult_vec_TCC1 0
  (mult_vec_TCC1-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil nil))
 (mult_vec_TCC2 0
  (mult_vec_TCC2-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil nil))
 (mult_vec_TCC3 0
  (mult_vec_TCC3-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil nil))
 (mat_vec_sub_TCC1 0
  (mat_vec_sub_TCC1-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil
   nil))
 (mat_vec_sub_TCC2 0
  (mat_vec_sub_TCC2-1 nil 3627300815 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rows const-decl "nat" matrices nil))
   nil))
 (mat_vec_sub_TCC3 0
  (mat_vec_sub_TCC3-1 nil 3627300815 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rows const-decl "nat" matrices nil))
   nil))
 (assoc_vec_TCC1 0
  (assoc_vec_TCC1-1 nil 3627326902 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rows const-decl "nat" matrices nil))
   nil))
 (assoc_vec_TCC2 0
  (assoc_vec_TCC2-1 nil 3627327106 ("" (subtype-tcc) nil nil) nil nil))
 (assoc_vec_TCC3 0
  (assoc_vec_TCC3-1 nil 3627327106 ("" (subtype-tcc) nil nil) nil nil))
 (length_mat_vec_TCC1 0
  (length_mat_vec_TCC1-1 nil 3627395855 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rows const-decl "nat" matrices nil))
   nil))
 (id_vec_TCC1 0
  (id_vec_TCC1-1 nil 3627326954 ("" (subtype-tcc) nil nil) nil nil))
 (id_vec_TCC2 0
  (id_vec_TCC2-1 nil 3627326954 ("" (subtype-tcc) nil nil) nil nil))
 (injection?_TCC1 0
  (injection?_TCC1-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil
   nil))
 (injection?_TCC2 0
  (injection?_TCC2-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil
   nil))
 (injection?_TCC3 0
  (injection?_TCC3-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil
   nil))
 (free?_TCC1 0
  (free?_TCC1-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil nil))
 (free?_TCC2 0
  (free?_TCC2-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil nil))
 (free?_TCC3 0
  (free?_TCC3-1 nil 3627748702 ("" (termination-tcc) nil nil) nil nil))
 (free?_TCC4 0
  (free?_TCC4-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil nil))
 (inj_sur 0
  (inj_sur-1 nil 3627748703
   ("" (induct n)
    (("1" (skolem-typepred) nil nil)
     ("2" (skolem-typepred)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (prop)
            (("1" (case "nth(M!1, 0) = zero(j!1+1)")
              (("1"
                (case "M!1 * nth(Id(j!1 + 1), j!1) = zero(j!1 + 1)")
                (("1" (expand injection?)
                  (("1"
                    (instantiate -11
                     ("zero(j!1+1)" "nth(Id(j!1 + 1), j!1)"))
                    (("1" (prop)
                      (("1" (hide-all-but -1)
                        (("1" (expand Id)
                          (("1" (expand form_matrix)
                            (("1"
                              (typepred
                               "array2list[listn[real](1 + j!1)](1 + j!1)(LAMBDA (k: nat): array2list[real](1 + j!1)(LAMBDA (p: nat): IF k = p THEN 1 ELSE 0 ENDIF))")
                              (("1"
                                (inst -3 "j!1")
                                (("1"
                                  (delete -1)
                                  (("1"
                                    (delete -1)
                                    (("1"
                                      (case
                                       "nth(zero(1 + j!1), j!1) = nth(array2list[real](1 + j!1)(LAMBDA (p: nat): IF j!1 = p THEN 1 ELSE 0 ENDIF), j!1)")
                                      (("1"
                                        (delete -2)
                                        (("1"
                                          (delete -2)
                                          (("1"
                                            (expand zero)
                                            (("1"
                                              (typepred
                                               "array2list[real](1 + j!1)(LAMBDA (p: nat): 0)")
                                              (("1"
                                                (typepred
                                                 "array2list[real](1 + j!1)(LAMBDA (p: nat): IF j!1 = p THEN 1 ELSE 0 ENDIF)")
                                                (("1"
                                                  (rewrite -6 :dir RL)
                                                  (("1"
                                                    (instantiate
                                                     -6
                                                     "j!1")
                                                    (("1"
                                                      (instantiate
                                                       -3
                                                       "j!1")
                                                      (("1"
                                                        (rewrite
                                                         -3
                                                         :dir
                                                         RL)
                                                        (("1"
                                                          (hide-all-but
                                                           -6)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite -2)
                                        (("2"
                                          (rewrite -1)
                                          (("2"
                                            (assert)
                                            (("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (grind) nil nil)
                                       ("4" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (inst 1 "zero(1 + j!1)") nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite -1)
                        (("2" (delete 2) (("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete 2)
                      (("2" (hide-all-but 1)
                        (("2" (typepred "Id(1 + j!1)")
                          (("2" (rewrite -6)
                            (("2" (hide-all-but (1 -5))
                              (("2"
                                (expand columns)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (delete 1)
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                 ("4" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (inv_bij 0
  (inv_bij-1 nil 3627326501
   ("" (skolem!)
    (("" (flatten)
      (("" (expand "invertible?")
        (("" (skolem!)
          (("" (prop)
            (("1" (expand "injection?")
              (("1" (skolem!)
                (("1" (flatten)
                  (("1" (case "IQ!1 * M!1 * x!1 = IQ!1 * M!1 * y!1")
                    (("1" (rewrite -4)
                      (("1" (rewrite -4)
                        (("1" (rewrite id_vec)
                          (("1" (rewrite id_vec) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (delete 2)
                      (("2" (rewrite assoc_vec :dir RL)
                        (("2" (rewrite assoc_vec :dir RL)
                          (("2" (rewrite -) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (delete 2)
                      (("3" (rewrite rows_mult)
                        (("3" (typepred "y!1")
                          (("3" (typepred "IQ!1")
                            (("3" (typepred "M!1")
                              (("3"
                                (replace -13)
                                (("3"
                                  (replace -15)
                                  (("3"
                                    (replace -6)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (delete -3)
                      (("4" (delete -3)
                        (("4" (delete -1)
                          (("4" (delete 2)
                            (("4" (rewrite rows_mult)
                              (("4"
                                (rewrite -1)
                                (("4"
                                  (typepred "M!1")
                                  (("4"
                                    (typepred "x!1")
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "surjection?")
              (("2" (skolem-typepred)
                (("2" (inst 1 "IQ!1 * y!1")
                  (("1" (rewrite assoc_vec)
                    (("1" (rewrite -5) (("1" (rewrite id_vec) nil nil))
                      nil))
                    nil)
                   ("2" (lemma length_rows)
                    (("2" (rewrite length_mat_vec) nil nil)) nil)
                   ("3" (rewrite -2)
                    (("3" (rewrite -3)
                      (("3" (rewrite -2)
                        (("3" (delete -2)
                          (("3" (delete -1)
                            (("3" (typepred "M!1")
                              (("3" (rewrite -6) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((surjection? const-decl "bool" reduction nil) nil nil nil
    (length_mat_vec formula-decl nil reduction nil)
    (length_rows formula-decl nil matrices nil)
    (injection? const-decl "bool" reduction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rows_mult formula-decl nil matrices nil)
    (assoc_vec formula-decl nil reduction nil)
    (id_vec formula-decl nil reduction nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Matrix type-eq-decl nil matrices nil)
    (rows const-decl "nat" matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (* const-decl "{x: Vector | length(x) = columns(M)}" reduction nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (* const-decl "real" matrices nil)
    (row const-decl "Vector" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (* const-decl
       "{A: MatrixMN(rows(M), columns(N)) | FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       matrices nil)
    (> const-decl "bool" reals nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (invertible? const-decl "bool" matrix_inv nil))
   shostak))
 (bij_inv 0
  (bij_inv-1 nil 3627401274
   ("" (lemma bij_rinv)
    (("" (skolem-typepred)
      (("" (instantiate -8 ("n!1" "M!1"))
        (("" (hide -3)
          (("" (prop)
            (("" (skolem-typepred)
              (("" (expand invertible?)
                (("" (inst 1 "IQ!1")
                  (("" (hide -2)
                    (("" (prop)
                      (("1" (grind) nil nil)
                       ("2" (lemma bij_rinv)
                        (("2" (instantiate -1 ("n!1" "IQ!1"))
                          (("2" (prop)
                            (("1" (skolem-typepred)
                              (("1"
                                (hide -2)
                                (("1"
                                  (case
                                   "M!1 * IQ!1 * IQ!2 = M!1 * Id(n!1)")
                                  (("1"
                                    (lemma matrix_mult_assoc)
                                    (("1"
                                      (instantiate
                                       -1
                                       ("IQ!2" "M!1" "IQ!1"))
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replace -14)
                                          (("1"
                                            (rewrite -1 :dir RL)
                                            (("1"
                                              (rewrite mult_Id_right)
                                              (("1"
                                                (rewrite mult_Id_left)
                                                (("1"
                                                  (rewrite -1)
                                                  (("1"
                                                    (rewrite -18)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand rows)
                                          (("2"
                                            (expand columns)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2)
                                    (("2"
                                      (rewrite matrix_mult_assoc)
                                      (("1" (rewrite -6) nil nil)
                                       ("2"
                                        (expand columns)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2)
                              (("2"
                                (expand "injection?")
                                (("2"
                                  (skolem-typepred)
                                  (("2"
                                    (prop)
                                    (("2"
                                      (case
                                       "M!1 * IQ!1 * x!1 = M!1 * IQ!1 * y!1")
                                      (("1"
                                        (rewrite -12)
                                        (("1"
                                          (rewrite id_vec)
                                          (("1"
                                            (rewrite id_vec)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete 2)
                                        (("2"
                                          (rewrite assoc_vec :dir RL)
                                          (("2"
                                            (rewrite assoc_vec :dir RL)
                                            (("2"
                                              (rewrite -5)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (delete 2)
                                        (("3"
                                          (rewrite rows_mult)
                                          (("3"
                                            (rewrite -4)
                                            (("3"
                                              (rewrite -16)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (delete 2)
                                        (("4"
                                          (rewrite -2)
                                          (("4"
                                            (rewrite rows_mult)
                                            (("4"
                                              (rewrite -16)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (delete 2)
                              (("3"
                                (expand surjection?)
                                (("3"
                                  (skolem-typepred)
                                  (("3"
                                    (inst 1 "M!1 * y!1")
                                    (("1"
                                      (case
                                       "M!1 * (IQ!1 * (M!1 * y!1)) = M!1 * y!1")
                                      (("1"
                                        (expand injection?)
                                        (("1"
                                          (instantiate
                                           -16
                                           ("(IQ!1 * (M!1 * y!1))"
                                            "y!1"))
                                          (("1" (prop) nil nil)
                                           ("2"
                                            (rewrite
                                             length_rows
                                             :dir
                                             RL)
                                            (("2"
                                              (rewrite length_rows)
                                              (("2"
                                                (lemma length_rows)
                                                (("2"
                                                  (delete 2)
                                                  (("2"
                                                    (rewrite
                                                     length_mat_vec)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete 2)
                                        (("2"
                                          (lemma assoc_vec)
                                          (("2"
                                            (instantiate
                                             -1
                                             ("n!1"
                                              "M!1 * y!1"
                                              "M!1"
                                              "IQ!1"))
                                            (("1"
                                              (rewrite -1)
                                              (("1"
                                                (rewrite -8)
                                                (("1"
                                                  (rewrite id_vec)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete 2)
                                              (("2"
                                                (rewrite
                                                 length_mat_vec)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (rewrite length_mat_vec)
                                        (("3" (rewrite -14) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite length_mat_vec)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (rewrite -12) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (> const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (<= const-decl "bool" reals nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_full application-judgement "FullMatrix" matrices nil)
    (form_matrix_square application-judgement "FullMatrix" matrices
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Id const-decl "{M: SquareMatrix(pm) |
         (FORALL (i, j): entry(M)(i, j) = IF i < pm AND i = j THEN 1 ELSE 0 ENDIF) AND
          (FORALL (pn: posnat, N: MatrixMN(pm, pn)): M * N = N) AND (FORALL (pn: posnat, N: MatrixMN(pn, pm)): N * M = N)}"
     matrices nil)
    (* const-decl
       "{A: MatrixMN(rows(M), columns(N)) | FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
       matrices nil)
    (mult const-decl
     "{A: MatrixMN(rows(M), columns(N)) | FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}"
     matrices nil)
    (form_matrix const-decl
     "{M: MatrixMN(m, n) | FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list "structures/")
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list "structures/")
    (row const-decl "Vector" matrices nil)
    (length_mat_vec formula-decl nil reduction nil) nil
    (length_rows formula-decl nil matrices nil) nil nil nil
    (surjection? const-decl "bool" reduction nil)
    (* const-decl "{x: Vector | length(x) = columns(M)}" reduction nil)
    (id_vec formula-decl nil reduction nil)
    (assoc_vec formula-decl nil reduction nil)
    (rows_mult formula-decl nil matrices nil)
    (injection? const-decl "bool" reduction nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (col def-decl "VectorN(rows(M))" matrices nil)
    (VectorN type-eq-decl nil matrices nil)
    (* const-decl "real" matrices nil)
    (Vector type-eq-decl nil matrices nil)
    (entry const-decl "real" matrices nil)
    (MatrixMN type-eq-decl nil matrices nil)
    (dot def-decl "real" matrices nil)
    (access const-decl "real" matrices nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (mult_Id_right formula-decl nil matrices nil)
    (mult_Id_left formula-decl nil matrices nil)
    (matrix_mult_assoc formula-decl nil matrices nil)
    (invertible? const-decl "bool" matrix_inv nil)
    (bij_rinv formula-decl nil reduction nil))
   shostak))
 (inv_bij_iff 0
  (inv_bij_iff-1 nil 3627401089
   ("" (skolem-typepred)
    (("" (lemma inv_bij)
      (("" (instantiate -1 ("n!1" "M!1"))
        (("" (lemma bij_inv)
          (("" (instantiate -1 ("n!1" "M!1"))
            (("" (split 1)
              (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv_bij formula-decl nil reduction nil)
    (bij_inv formula-decl nil reduction nil)
    (SquareMatrix type-eq-decl nil matrices nil)
    (Square type-eq-decl nil matrices nil)
    (PosFullMatrix type-eq-decl nil matrices nil)
    (columns def-decl
     "{c: nat | (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND (null?(M) AND c = 0 OR (EXISTS (i: below(length(M))): length(nth(M, i)) = c))}"
     matrices nil)
    (<= const-decl "bool" reals nil)
    (rows const-decl "nat" matrices nil)
    (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (eigenvalue?_TCC1 0
  (eigenvalue?_TCC1-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil
   nil))
 (eigenvalue?_TCC2 0
  (eigenvalue?_TCC2-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil
   nil))
 (eigenvector?_TCC1 0
  (eigenvector?_TCC1-1 nil 3627300815 ("" (subtype-tcc) nil nil) nil
   nil))
 (eigenvector?_TCC2 0
  (eigenvector?_TCC2-1 nil 3627326179 ("" (subtype-tcc) nil nil) nil
   nil))
 (inv_vec_TCC1 0
  (inv_vec_TCC1-1 nil 3627748702 ("" (subtype-tcc) nil nil) nil nil))
 (inv_vec 0
  (inv_vec-1 nil 3627404669
   ("" (skolem-typepred) (("" (postpone) nil nil)) nil) nil shostak)))

